@page
@model InventoryManagementSystem.Pages.IndexModel

@{
    ViewData["Title"] = "Home Page";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/css/site.css" />
</head>
<body>
    <header>
        <h1>@ViewData["Title"]</h1>
        <nav>
            <ul>
                <li><a href="/Products">Products</a></li>
                <li><a href="/Sales">Sales</a></li>
            </ul>
        </nav>
    </header>
    
    <main>
        <section>
            <h2>Welcome to the Inventory Management System</h2>

            @if (Model.LowStockProducts.Any())
{
    <div id="stock-alert" class="alert alert-warning alert-dismissible fade show" role="alert">
        <strong>Notification:</strong> The following products are out of stock:
        <ul id="low-stock-list">
        @foreach (var product in Model.LowStockProducts)
        {
            <li data-product-id="@product.Id">@product.Name</li>
        }
        </ul>

        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
            <ul>
                <li><a href="/Products">View Products</a> - See the list of all products.</li>
                <li><a href="/Sales/SalesHistory">View Sales History</a> - See the list of all sales.</li>
            </ul>
        </section>
    </main>

   @section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        const POLLING_INTERVAL = 30000; // 30 seconds

        function checkRestockedProducts() {
            fetch('/Products/CheckStock') // Call the new Razor Page for checking stock
                .then(response => response.json())
                .then(data => {
                    const lowStockList = document.getElementById('low-stock-list');
                    const alertDiv = document.getElementById('stock-alert');

                    // Clear the existing list and check if we have out of stock products
                    lowStockList.innerHTML = ''; 
                    if (data.length === 0) {
                        // No more low stock products, remove the notification
                        if (alertDiv) {
                            alertDiv.remove();
                        }
                    } else {
                        // Update the notification with the remaining low-stock products
                        data.forEach(product => {
                            const listItem = document.createElement('li');
                            listItem.textContent = product.name;
                            listItem.setAttribute('data-product-id', product.id);
                            lowStockList.appendChild(listItem);
                        });

                        // Ensure the notification is displayed
                        if (!alertDiv) {
                            displayNotification();
                        }
                    }
                })
                .catch(error => console.error('Error checking stock:', error));
        }

        function displayNotification() {
            const notificationHTML = `
                <div id="stock-alert" class="alert alert-warning alert-dismissible fade show" role="alert">
                    <strong>Notification:</strong> The following products are out of stock:
                    <ul id="low-stock-list"></ul>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>`;
            document.body.insertAdjacentHTML('afterbegin', notificationHTML);
        }

        // Run the function periodically
        setInterval(checkRestockedProducts, POLLING_INTERVAL);
    </script>
}

</body>
</html>
